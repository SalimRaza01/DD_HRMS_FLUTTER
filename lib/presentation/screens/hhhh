// ignore_for_file: unused_import

import 'dart:convert';
import 'dart:io';
import 'package:animated_custom_dropdown/custom_dropdown.dart';
import 'package:flutter/services.dart';
import 'package:hrms/core/api/api.dart';
import 'package:hrms/core/api/api_config.dart';
import 'package:hrms/core/theme/app_colors.dart';
import 'package:dio/dio.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:intl/intl.dart';
import 'package:modal_bottom_sheet/modal_bottom_sheet.dart';
import 'package:file_picker/file_picker.dart';
import 'leave_policy.dart';

class ApplyLeave extends StatefulWidget {
  const ApplyLeave({super.key});

  @override
  State<ApplyLeave> createState() => _ApplyLeaveState();
}

class _ApplyLeaveState extends State<ApplyLeave> with TickerProviderStateMixin {
  String _selectedText = 'Full Day';
  String? _selectedLeaveType;
  Color? activeColor;
  Color? activeText;
  TextEditingController startDateController = TextEditingController();
  TextEditingController endDateController = TextEditingController();
  TextEditingController selectFromTime = TextEditingController();
  TextEditingController selectToTime = TextEditingController();
  TextEditingController reasonController = TextEditingController();
  DateTime selectedStartDate = DateTime.now();
  DateTime selectedendDate = DateTime.now();
  DateTime? fromtime;
  DateTime? toTime;
  String? casualLeave;
  String? earnedLeave;
  String? medicalLeave;
  String? maternityLeave;
  String? paternityLeave;
  String shortLeave = '1';
  List<PlatformFile>? _paths;
  bool _isLoading = false;
  String? empID;
  List<Leave> leaveList = [];

  void checkConditions() {
    num? totalDays;

    Leave selectedLeave = leaveList.firstWhere(
      (leave) => leave.name == _selectedLeaveType,
      orElse: () => Leave('Unknown', '0'),
    );

    if (_selectedLeaveType!.contains('Casual')) {
      DateTime startDate = DateTime.parse(startDateController.text);
      DateTime now = DateTime.now();

      if (startDate.year != now.year || startDate.month != now.month) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content:
                Text('Casual leave can only be applied for the current month.'),
            backgroundColor: Colors.red,
          ),
        );
        return;
      }

      if (_selectedText == 'Full Day') {
        setState(() {
          totalDays = 1;
        });
      } else if (_selectedText == '1st Half' || _selectedText == '2nd Half') {
        setState(() {
          totalDays = 0.5;
        });
      } else {
        totalDays = 1;
      }
    } else {
      totalDays = selectedendDate.difference(selectedStartDate).inDays;
    }

    if (selectedLeave.balanceInt < totalDays!) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Not enough leave balance for ${selectedLeave.name}'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    DateTime startDate = DateTime.parse(startDateController.text);
    DateTime now = DateTime.now();

    if (startDate.day == now.day && now.hour >= 9) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Leave must be applied before 9 AM for today.'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    if (startDate.isAtSameMomentAs(now)) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('leave must be applied for a future date.'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    if (_selectedLeaveType!.contains('Casual')) {
      DateTime startDate = DateTime.parse(startDateController.text);
      DateTime now = DateTime.now();

      if (startDate.isAtSameMomentAs(now)) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('leave must be applied for a future date.'),
            backgroundColor: Colors.red,
          ),
        );
        return;
      }

      if (startDate.day == now.day && now.hour >= 9) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('leave must be applied before 9 AM for today.'),
            backgroundColor: Colors.red,
          ),
        );
        return;
      }
    }

    if (_selectedLeaveType!.contains('Medical')) {
      DateTime startDate = DateTime.parse(startDateController.text);
      DateTime endDate = DateTime.parse(endDateController.text);
      int medicalLeaveDuration = endDate.difference(startDate).inDays + 1;
      print(medicalLeaveDuration);

      if (startDate.isAfter(DateTime.now())) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Medical leave can only be applied for past days.'),
            backgroundColor: Colors.red,
          ),
        );
        return;
      }

      if (medicalLeaveDuration < 2 || medicalLeaveDuration > 6) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Medical leave must be between 2 to 6 days.'),
            backgroundColor: Colors.red,
          ),
        );
        return;
      }
      if (_paths == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Please Upload Prescription First'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  Future<void> getleaveBalance() async {
    var box = await Hive.openBox('authBox');

    setState(() {
      casualLeave = box.get('casual');
      medicalLeave = box.get('medical');
      maternityLeave = box.get('maternity');
      earnedLeave = box.get('earned');
      paternityLeave = box.get('paternity');
      empID = box.get('employeeId');

      leaveList = [
        Leave('Casual Leave', casualLeave!),
        Leave('Medical Leave', medicalLeave!),
        Leave('Earned Leave', earnedLeave!),
        Leave('Short-Leave', '1'),
        Leave('Maternity Leave', maternityLeave!),
        Leave('Paternity Leave', paternityLeave!),
        Leave('Short Leave', shortLeave),
      ];
    });
  }

  @override
  void initState() {
    getleaveBalance();
    super.initState();
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);
  }

  String? get uploadURL => '$documentUpload/$empID';
  Future<void> uploadPrescription(List<PlatformFile> files) async {
    final dio = Dio();
    setState(() {
      _isLoading = true;
    });

    for (var file in files) {
      if (file.path != null) {
        try {
          var formData = FormData.fromMap({
            'file':
                await MultipartFile.fromFile(file.path!, filename: file.name),
          });

          Response response = await dio.post(uploadURL!, data: formData);

          if (response.statusCode == 200) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                  content: Text('Prescription Uploaded'),
                  backgroundColor: Colors.green),
            );
          } else {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                  content: Text('Failed to Upload Prescription'),
                  backgroundColor: Colors.red),
            );
          }
        } catch (e) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error: $e'), backgroundColor: Colors.red),
          );
        }
      } else {
        print("File path is null");
      }
    }

    setState(() {
      _isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    final height = MediaQuery.of(context).size.height;
    final width = MediaQuery.of(context).size.width;

    return SafeArea(
        child: Scaffold(
            backgroundColor: AppColor.mainBGColor,
            body: SingleChildScrollView(
              child: SizedBox(
                height: height,
                width: width,
                child: Padding(
                  padding: const EdgeInsets.all(15),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      Text(
                        'Apply Leave',
                        style: TextStyle(
                            fontSize: height * 0.02,
                            color: AppColor.mainTextColor,
                            fontWeight: FontWeight.bold),
                      ),
                      SizedBox(
                        height: height * 0.01,
                      ),
                      CustomDropdown<Leave>(
                        hintText: 'Select Leave Type',
                        items: leaveList,
                        onChanged: (Leave? value) {
                          setState(() {
                            if (value != null) {
                              _selectedLeaveType = value.name;
                              startDateController.clear();
                              endDateController.clear();
                            }
                          });
                        },
                        listItemBuilder:
                            (context, item, isSelected, onItemSelect) {
                          return ListTile(
                            title: Text('${item.name} - ${item.balance}'),
                          );
                        },
                      ),
                      Visibility(
                        visible: _selectedLeaveType != null,
                        child: Column(
                          children: [
                            SizedBox(
                              height: height * 0.015,
                            ),
                            Visibility(
                              visible: _selectedLeaveType == 'Casual Leave' ||
                                  _selectedLeaveType == 'Earned Leave',
                              child: Card(
                                color: AppColor.mainFGColor,
                                elevation: 4,
                                margin: EdgeInsets.all(0),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(5),
                                ),
                                shadowColor: Colors.black.withOpacity(0.1),
                                child: Padding(
                                  padding: EdgeInsets.all(3),
                                  child: Row(
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      children: [
                                        _selectButton(
                                            'Full Day', height, width),
                                        _selectButton(
                                            '1st Half', height, width),
                                        _selectButton(
                                            '2nd Half', height, width),
                                      ]),
                                ),
                              ),
                            ),
                         
                            Visibility(
                                visible: _selectedLeaveType == 'Short Leave',
                                child: Text('shortleave selected')),
                            Visibility(
                                visible: _selectedLeaveType != 'Short Leave',
                                child: Column(
                                  children: [
                                    startDateLeave(height, width, context),
                                    SizedBox(
                                      height: height * 0.015,
                                    ),
                                    endDateLeave(height, width, context)
                                  ],
                                )),
                            SizedBox(
                              height: height * 0.015,
                            ),
                            Card(
                              color: AppColor.mainFGColor,
                              elevation: 4,
                              margin: EdgeInsets.all(0),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(10),
                              ),
                              shadowColor: Colors.black.withOpacity(0.1),
                              child: Padding(
                                padding:
                                    const EdgeInsets.symmetric(vertical: 15),
                                child: SizedBox(
                                    height: height * 0.12,
                                    width: width,
                                    child: TextFormField(
                                      textAlignVertical: TextAlignVertical.top,
                                      keyboardType: TextInputType.multiline,
                                      maxLines: null,
                                      expands: true,
                                      controller: reasonController,
                                      style: TextStyle(
                                        overflow: TextOverflow.ellipsis,
                                        color:
                                            const Color.fromARGB(255, 0, 0, 0),
                                      ),
                                      decoration: InputDecoration(
                                        filled: false,
                                        floatingLabelBehavior:
                                            FloatingLabelBehavior.always,
                                        enabledBorder: OutlineInputBorder(
                                            borderSide: BorderSide.none),
                                        border: OutlineInputBorder(
                                            borderSide: BorderSide.none),
                                        focusedBorder: OutlineInputBorder(
                                            borderSide: BorderSide.none),
                                        label: Text('Describe Leave Reason'),
                                      ),
                                    )),
                              ),
                            ),
                            SizedBox(
                              height: height * 0.015,
                            ),
                            Visibility(
                              visible: _selectedLeaveType != null &&
                                  _selectedLeaveType!.contains('Medical'),
                              child: Builder(
                                builder: (BuildContext context) => _isLoading
                                    ? Center(child: CircularProgressIndicator())
                                    : _paths == null
                                        ? SizedBox()
                                        : ListView.builder(
                                            shrinkWrap: true,
                                            itemCount: _paths?.length ?? 0,
                                            itemBuilder: (BuildContext context,
                                                int index) {
                                              final file = _paths![index];
                                              return Card(
                                                color: AppColor.mainFGColor,
                                                elevation: 5,
                                                margin: EdgeInsets.all(0),
                                                shape: RoundedRectangleBorder(
                                                  borderRadius:
                                                      BorderRadius.circular(15),
                                                ),
                                                shadowColor: Colors.black
                                                    .withOpacity(0.1),
                                                child: ListTile(
                                                  leading: Icon(
                                                    Icons.file_copy_rounded,
                                                    color: Colors.blue,
                                                  ),
                                                  title: Text(
                                                    file.name,
                                                    style: TextStyle(
                                                        color: AppColor
                                                            .mainTextColor2,
                                                        fontSize: 15),
                                                  ),
                                                  trailing: IconButton(
                                                    icon: Icon(
                                                      Icons.delete,
                                                      color: Colors.red,
                                                    ),
                                                    onPressed: () {
                                                      setState(() {
                                                        _paths!.removeAt(index);
                                                      });
                                                    },
                                                  ),
                                                ),
                                              );
                                            },
                                          ),
                              ),
                            ),
                            SizedBox(
                              height: height * 0.015,
                            ),
                            Visibility(
                              visible: _selectedLeaveType != null &&
                                  _selectedLeaveType!.contains('Medical'),
                              child: InkWell(
                                onTap: () async {
                                  FilePickerResult? result =
                                      await FilePicker.platform.pickFiles();

                                  setState(() {
                                    _isLoading = true;
                                  });

                                  if (result != null) {
                                    setState(() {
                                      _paths = result.files;
                                      uploadPrescription(result.files);
                                    });
                                  } else {
                                    setState(() {
                                      _isLoading = false;
                                    });
                                  }
                                },
                                child: Container(
                                  decoration: BoxDecoration(
                                    color: Colors.blue,
                                    borderRadius: BorderRadius.circular(20),
                                  ),
                                  padding: EdgeInsets.symmetric(
                                      horizontal: 50, vertical: 10),
                                  child: Text(
                                    "Upload Prescription",
                                    style: TextStyle(
                                        color: AppColor.mainFGColor,
                                        fontSize: 15),
                                  ),
                                ),
                              ),
                            ),
                            SizedBox(
                              height: height * 0.05,
                            ),
                            InkWell(
                              onTap: () async {
                                checkConditions();
                              },
                              child: Container(
                                width: width / 2,
                                decoration: BoxDecoration(
                                  gradient: LinearGradient(
                                      begin: Alignment.topCenter,
                                      end: Alignment.bottomCenter,
                                      colors: [
                                        AppColor.primaryThemeColor,
                                        AppColor.secondaryThemeColor2,
                                      ]),
                                  borderRadius: BorderRadius.circular(20),
                                ),
                                child: Padding(
                                  padding: const EdgeInsets.symmetric(
                                      horizontal: 20, vertical: 12),
                                  child: Center(
                                    child: Text(
                                      'SUBMIT',
                                      style: TextStyle(
                                          color: AppColor.mainFGColor,
                                          fontWeight: FontWeight.w500),
                                    ),
                                  ),
                                ),
                              ),
                            ),
                            SizedBox(
                              height: height * 0.01,
                            ),
                          ],
                        ),
                      ),
                      TextButton(
                          onPressed: () => showCupertinoModalBottomSheet(
                                expand: true,
                                context: context,
                                barrierColor:
                                    const Color.fromARGB(130, 0, 0, 0),
                                backgroundColor:
                                    const Color.fromARGB(255, 255, 255, 255),
                                builder: (context) => LeavePolicyScreen(),
                              ),
                          child: Text('See Leave Policy'))
                    ],
                  ),
                ),
              ),
            )));
  }

  Card endDateLeave(double height, double width, BuildContext context) {
    return Card(
      color: AppColor.mainFGColor,
      elevation: 4,
      margin: EdgeInsets.all(0),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(10),
      ),
      shadowColor: Colors.black.withOpacity(0.1),
      child: Padding(
        padding: EdgeInsets.symmetric(vertical: 10, horizontal: 15),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            SizedBox(
              height: height * 0.03,
              width: width / 1.2,
              child: TextField(
                textAlign: TextAlign.center,
                readOnly: true,
                controller: endDateController,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Colors.black54,
                ),
                decoration: InputDecoration(
                  floatingLabelBehavior: FloatingLabelBehavior.never,
                  contentPadding: EdgeInsets.all(0),
                  enabledBorder:
                      OutlineInputBorder(borderSide: BorderSide.none),
                  border: OutlineInputBorder(borderSide: BorderSide.none),
                  focusedBorder:
                      OutlineInputBorder(borderSide: BorderSide.none),
                  hintText: 'Select End Date',
                ),
                onTap: () {
                  showModalBottomSheet(
                    backgroundColor: AppColor.mainFGColor,
                    context: context,
                    builder: (context) {
                      return Container(
                        height: height * 0.35,
                        width: MediaQuery.of(context).size.width,
                        child: Padding(
                          padding: const EdgeInsets.all(5.0),
                          child: Column(
                            children: [
                              Container(
                                height: height * 0.22,
                                child: CupertinoTheme(
                                  data: CupertinoThemeData(
                                    brightness: Brightness.light,
                                  ),
                                  child: CupertinoDatePicker(
                                    mode: CupertinoDatePickerMode.date,
                                    use24hFormat: false,
                                    maximumDate: _selectedLeaveType!
                                            .contains('Medical')
                                        ? DateTime.now()
                                            .subtract(Duration(days: 1))
                                        : _selectedLeaveType!.contains('Earned')
                                            ? DateTime.parse(
                                                    startDateController.text)
                                                .add(Duration(days: 6))
                                            : null,
                                    minimumDate: _selectedLeaveType!
                                            .contains('Medical')
                                        ? DateTime.now()
                                            .subtract(Duration(days: 5))
                                        : _selectedLeaveType!.contains('Earned')
                                            ? DateTime.parse(
                                                startDateController.text)
                                            : null,
                                    initialDateTime:
                                        _selectedLeaveType!.contains('Earned')
                                            ? DateTime.parse(
                                                startDateController.text)
                                            : null,
                                    onDateTimeChanged: (DateTime newDate) {
                                      selectedendDate = newDate;
                                    },
                                  ),
                                ),
                              ),
                              Padding(
                                padding: const EdgeInsets.all(10),
                                child: Row(
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceAround,
                                    children: [
                                      InkWell(
                                        onTap: () {
                                          Navigator.pop(context);
                                        },
                                        child: Container(
                                            width: MediaQuery.of(context)
                                                    .size
                                                    .width /
                                                3,
                                            decoration: BoxDecoration(
                                                borderRadius:
                                                    BorderRadius.circular(10),
                                                color: AppColor.mainBGColor),
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.symmetric(
                                                      horizontal: 30,
                                                      vertical: 10),
                                              child: Center(
                                                child: Text(
                                                  'CANCEL',
                                                  style: TextStyle(
                                                      color: Colors.black87,
                                                      fontSize: height * 0.016),
                                                ),
                                              ),
                                            )),
                                      ),
                                      InkWell(
                                        onTap: () {
                                          setState(() {
                                            endDateController.text =
                                                DateFormat('yyyy-MM-dd')
                                                    .format(selectedendDate);
                                          });
                                          Navigator.pop(context);
                                        },
                                        child: Container(
                                            width: MediaQuery.of(context)
                                                    .size
                                                    .width /
                                                3,
                                            decoration: BoxDecoration(
                                                borderRadius:
                                                    BorderRadius.circular(10),
                                                color:
                                                    AppColor.primaryThemeColor),
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.symmetric(
                                                      horizontal: 30,
                                                      vertical: 10),
                                              child: Center(
                                                child: Text(
                                                  'SELECT',
                                                  style: TextStyle(
                                                      color:
                                                          AppColor.mainFGColor,
                                                      fontSize: height * 0.016),
                                                ),
                                              ),
                                            )),
                                      ),
                                    ]),
                              ),
                            ],
                          ),
                        ),
                      );
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Card startDateLeave(double height, double width, BuildContext context) {
    return Card(
      color: AppColor.mainFGColor,
      elevation: 4,
      margin: EdgeInsets.all(0),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(10),
      ),
      shadowColor: Colors.black.withOpacity(0.1),
      child: Padding(
        padding: EdgeInsets.symmetric(vertical: 10, horizontal: 15),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            SizedBox(
              height: height * 0.03,
              width: width / 1.2,
              child: TextField(
                textAlign: TextAlign.center,
                readOnly: true,
                controller: startDateController,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Colors.black54,
                ),
                decoration: InputDecoration(
                  floatingLabelBehavior: FloatingLabelBehavior.never,
                  contentPadding: EdgeInsets.all(0),
                  enabledBorder:
                      OutlineInputBorder(borderSide: BorderSide.none),
                  border: OutlineInputBorder(borderSide: BorderSide.none),
                  focusedBorder:
                      OutlineInputBorder(borderSide: BorderSide.none),
                  hintText: 'Select Start Date',
                ),
                onTap: () {
                  DateTime minDate = DateTime.now();
                  // if (_selectedLeaveType == 'Medical Leave') {
                  //   minDate = DateTime.now().subtract(Duration(days: 1));
                  //   print(minDate.day);
                  // }

                  showModalBottomSheet(
                    backgroundColor: AppColor.mainFGColor,
                    context: context,
                    builder: (context) {
                      return SizedBox(
                        height: height * 0.35,
                        width: MediaQuery.of(context).size.width,
                        child: Padding(
                          padding: const EdgeInsets.all(5.0),
                          child: Column(
                            children: [
                              SizedBox(
                                height: height * 0.22,
                                child: CupertinoTheme(
                                    data: CupertinoThemeData(
                                      brightness: Brightness.light,
                                    ),
                                    child: _selectedLeaveType!
                                            .contains('Medical')
                                        ? CupertinoDatePicker(
                                            mode: CupertinoDatePickerMode.date,
                                            use24hFormat: false,
                                            maximumDate: DateTime.now()
                                                .subtract(Duration(days: 2)),
                                            minimumDate: DateTime.now()
                                                .subtract(Duration(days: 6)),
                                            onDateTimeChanged:
                                                (DateTime newDate) {
                                              selectedStartDate = newDate;
                                            },
                                          )
                                        : CupertinoDatePicker(
                                            mode: CupertinoDatePickerMode.date,
                                            use24hFormat: false,
                                            minimumDate: _selectedLeaveType!
                                                    .contains('Earned')
                                                ? DateTime.now()
                                                    .add(Duration(days: 1))
                                                : _selectedLeaveType!
                                                        .contains('Casual')
                                                    ? DateTime(
                                                        DateTime.now().year,
                                                        DateTime.now().month,
                                                        1)
                                                    : null,
                                            maximumDate: _selectedLeaveType!
                                                    .contains('Casual')
                                                ? DateTime(DateTime.now().year,
                                                    DateTime.now().month + 1, 0)
                                                : null,
                                            onDateTimeChanged:
                                                (DateTime newDate) {
                                              setState(() {
                                                selectedStartDate = newDate;
                                              });
                                            },
                                          )),
                              ),
                              Padding(
                                padding: const EdgeInsets.all(10),
                                child: Row(
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceAround,
                                    children: [
                                      InkWell(
                                        onTap: () {
                                          Navigator.pop(context);
                                        },
                                        child: Container(
                                            width: MediaQuery.of(context)
                                                    .size
                                                    .width /
                                                3,
                                            decoration: BoxDecoration(
                                                borderRadius:
                                                    BorderRadius.circular(10),
                                                color: AppColor.mainBGColor),
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.symmetric(
                                                      horizontal: 30,
                                                      vertical: 10),
                                              child: Center(
                                                child: Text(
                                                  'CANCEL',
                                                  style: TextStyle(
                                                      color: Colors.black87,
                                                      fontSize: height * 0.016),
                                                ),
                                              ),
                                            )),
                                      ),
                                      InkWell(
                                        onTap: () {
                                          setState(() {
                                            startDateController.text =
                                                DateFormat('yyyy-MM-dd')
                                                    .format(selectedStartDate);
                                          });
                                          Navigator.pop(context);
                                        },
                                        child: Container(
                                            width: MediaQuery.of(context)
                                                    .size
                                                    .width /
                                                3,
                                            decoration: BoxDecoration(
                                                borderRadius:
                                                    BorderRadius.circular(10),
                                                color:
                                                    AppColor.primaryThemeColor),
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.symmetric(
                                                      horizontal: 30,
                                                      vertical: 10),
                                              child: Center(
                                                child: Text(
                                                  'SELECT',
                                                  style: TextStyle(
                                                      color:
                                                          AppColor.mainFGColor,
                                                      fontSize: height * 0.016),
                                                ),
                                              ),
                                            )),
                                      ),
                                    ]),
                              ),
                            ],
                          ),
                        ),
                      );
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Container forHalfDay(double height, double width, BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(10),
        color: AppColor.mainFGColor,
      ),
      child: Padding(
        padding: EdgeInsets.symmetric(vertical: 10, horizontal: 15),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            SizedBox(
              height: height * 0.03,
              width: width / 3,
              child: TextField(
                textAlign: TextAlign.center,
                readOnly: true,
                controller: selectFromTime,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Colors.black54,
                ),
                decoration: InputDecoration(
                  floatingLabelBehavior: FloatingLabelBehavior.never,
                  contentPadding: EdgeInsets.all(0),
                  enabledBorder:
                      OutlineInputBorder(borderSide: BorderSide.none),
                  border: OutlineInputBorder(borderSide: BorderSide.none),
                  focusedBorder:
                      OutlineInputBorder(borderSide: BorderSide.none),
                  hintText: 'Select Time',
                ),
                onTap: () {
                  showModalBottomSheet(
                    backgroundColor: AppColor.mainFGColor,
                    context: context,
                    builder: (context) {
                      return Container(
                        height: height * 0.35,
                        width: MediaQuery.of(context).size.width,
                        child: Padding(
                          padding: const EdgeInsets.all(5.0),
                          child: Column(
                            children: [
                              Container(
                                height: height * 0.22,
                                child: CupertinoTheme(
                                  data: CupertinoThemeData(
                                    brightness: Brightness.light,
                                  ),
                                  child: CupertinoDatePicker(
                                      initialDateTime: DateTime.now(),
                                      mode: CupertinoDatePickerMode.time,
                                      use24hFormat: false,
                                      showDayOfWeek: true,
                                      minimumDate: DateTime.now(),
                                      onDateTimeChanged: (DateTime newDate) {
                                        fromtime = newDate;
                                      }),
                                ),
                              ),
                              Padding(
                                padding: const EdgeInsets.all(10),
                                child: Row(
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceAround,
                                    children: [
                                      InkWell(
                                        onTap: () {
                                          Navigator.pop(context);
                                        },
                                        child: Container(
                                            width: MediaQuery.of(context)
                                                    .size
                                                    .width /
                                                3,
                                            decoration: BoxDecoration(
                                                borderRadius:
                                                    BorderRadius.circular(10),
                                                color: AppColor.mainBGColor),
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.symmetric(
                                                      horizontal: 30,
                                                      vertical: 10),
                                              child: Center(
                                                child: Text(
                                                  'CANCEL',
                                                  style: TextStyle(
                                                      color: Colors.black87,
                                                      fontSize: height * 0.016),
                                                ),
                                              ),
                                            )),
                                      ),
                                      InkWell(
                                        onTap: () {
                                          setState(() {
                                            selectFromTime.text ==
                                                "${fromtime!.hour}:${fromtime!.minute}";
                                          });
                                          Navigator.pop(context);
                                        },
                                        child: Container(
                                            width: MediaQuery.of(context)
                                                    .size
                                                    .width /
                                                3,
                                            decoration: BoxDecoration(
                                                borderRadius:
                                                    BorderRadius.circular(10),
                                                color:
                                                    AppColor.primaryThemeColor),
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.symmetric(
                                                      horizontal: 30,
                                                      vertical: 10),
                                              child: Center(
                                                child: Text(
                                                  'SELECT',
                                                  style: TextStyle(
                                                      color:
                                                          AppColor.mainFGColor,
                                                      fontSize: height * 0.016),
                                                ),
                                              ),
                                            )),
                                      ),
                                    ]),
                              ),
                            ],
                          ),
                        ),
                      );
                    },
                  );
                },
              ),
            ),
            Text(
              'To',
              style: TextStyle(color: Colors.black87, fontSize: height * 0.016),
            ),
            SizedBox(
              height: height * 0.03,
              width: width / 3,
              child: TextField(
                textAlign: TextAlign.center,
                readOnly: true,
                controller: selectToTime,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Colors.black54,
                ),
                decoration: InputDecoration(
                  floatingLabelBehavior: FloatingLabelBehavior.never,
                  contentPadding: EdgeInsets.all(0),
                  enabledBorder:
                      OutlineInputBorder(borderSide: BorderSide.none),
                  border: OutlineInputBorder(borderSide: BorderSide.none),
                  focusedBorder:
                      OutlineInputBorder(borderSide: BorderSide.none),
                  hintText: 'Select Time',
                ),
                onTap: () {
                  showModalBottomSheet(
                    backgroundColor: AppColor.mainFGColor,
                    context: context,
                    builder: (context) {
                      return Container(
                        height: height * 0.35,
                        width: MediaQuery.of(context).size.width,
                        child: Padding(
                          padding: const EdgeInsets.all(5.0),
                          child: Column(
                            children: [
                              Container(
                                height: height * 0.22,
                                child: CupertinoTheme(
                                  data: CupertinoThemeData(
                                    brightness: Brightness.light,
                                  ),
                                  child: CupertinoDatePicker(
                                      initialDateTime: DateTime.now(),
                                      mode: CupertinoDatePickerMode.time,
                                      use24hFormat: false,
                                      showDayOfWeek: true,
                                      minimumDate: DateTime.now(),
                                      onDateTimeChanged: (DateTime newDate) {
                                        toTime = newDate;
                                      }),
                                ),
                              ),
                              Padding(
                                padding: const EdgeInsets.all(10),
                                child: Row(
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceAround,
                                    children: [
                                      InkWell(
                                        onTap: () {
                                          Navigator.pop(context);
                                        },
                                        child: Container(
                                            width: MediaQuery.of(context)
                                                    .size
                                                    .width /
                                                3,
                                            decoration: BoxDecoration(
                                                borderRadius:
                                                    BorderRadius.circular(10),
                                                color: AppColor.mainBGColor),
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.symmetric(
                                                      horizontal: 30,
                                                      vertical: 10),
                                              child: Center(
                                                child: Text(
                                                  'CANCEL',
                                                  style: TextStyle(
                                                      color: Colors.black87,
                                                      fontSize: height * 0.016),
                                                ),
                                              ),
                                            )),
                                      ),
                                      InkWell(
                                        onTap: () {
                                          setState(() {
                                            selectToTime.text ==
                                                "${toTime!.hour}:${toTime!.minute}";
                                          });
                                          Navigator.pop(context);
                                        },
                                        child: Container(
                                            width: MediaQuery.of(context)
                                                    .size
                                                    .width /
                                                3,
                                            decoration: BoxDecoration(
                                                borderRadius:
                                                    BorderRadius.circular(10),
                                                color:
                                                    AppColor.primaryThemeColor),
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.symmetric(
                                                      horizontal: 30,
                                                      vertical: 10),
                                              child: Center(
                                                child: Text(
                                                  'SELECT',
                                                  style: TextStyle(
                                                      color:
                                                          AppColor.mainFGColor,
                                                      fontSize: height * 0.016),
                                                ),
                                              ),
                                            )),
                                      ),
                                    ]),
                              ),
                            ],
                          ),
                        ),
                      );
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _selectButton(String text, double height, double width) {
    Color activeColor;
    Color activeText;

    if (_selectedText == text) {
      activeColor = AppColor.mainThemeColor;
      activeText = AppColor.mainFGColor;
    } else {
      activeColor = Colors.transparent;
      activeText = Colors.black87;
    }

    return GestureDetector(
      onTap: () {
        setState(() {
          _selectedText = text;
        });
      },
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(5),
          color: activeColor,
        ),
        child: Padding(
          padding: EdgeInsets.symmetric(horizontal: width * 0.08, vertical: 6),
          child: Text(
            text,
            style: TextStyle(
              color: activeText,
              fontSize: height * 0.015,
            ),
          ),
        ),
      ),
    );
  }
}

class Leave {
  final String name;
  final String balance;

  Leave(this.name, this.balance);

  @override
  String toString() {
    return name;
  }

  num get balanceInt => num.tryParse(balance) ?? 0;
}
